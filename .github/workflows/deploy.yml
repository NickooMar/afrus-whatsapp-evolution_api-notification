name: Deploy Go Application to EC2

on:
  push:
    branches:
      - main
      - staging

jobs:
  deploy-staging:
    if: ${{ github.ref == 'refs/heads/staging' }} # Verifica si la rama es staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.3
        timeout-minutes: 30
        with:
          host: ${{ secrets.EC2_HOST_STAGING }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_STAGING }}
          command_timeout: 30m
          script: |
            cd ~/afrus-exports

            # 2. Update project
            git pull origin staging

            # 3. Build Docker image
            sudo docker build -t afrus-exports \
              --build-arg ENVIRONMENT="${{ secrets.ENVIRONMENT_STAGING }}" \
              --build-arg APP_KEY="${{ secrets.APP_KEY_STAGING }}" \
              --build-arg SERVER_PORT="${{ secrets.SERVER_PORT_STAGING }}" \
              --build-arg RABBITMQ_URL="${{ secrets.RABBITMQ_URL_STAGING }}" \
              --build-arg RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT_STAGING }}" \
              --build-arg RABBITMQ_USER="${{ secrets.RABBITMQ_USER_STAGING }}" \
              --build-arg RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD_STAGING }}" \
              --build-arg RABBITMQ_MANAGER_PORT="${{ secrets.RABBITMQ_MANAGER_PORT_STAGING }}" \
              --build-arg EXPORTS_QUEUE="${{ secrets.EXPORTS_QUEUE_STAGING }}" \
              --build-arg TAG_LEADS_QUEUE="${{ secrets.TAG_LEADS_QUEUE_STAGING  }}" \
              --build-arg DELETE_LEADS_QUEUE="${{ secrets.DELETE_LEADS_QUEUE_STAGING  }}" \
              --build-arg EXPORTS_EXCHANGE="${{ secrets.EXPORTS_EXCHANGE_STAGING }}" \
              --build-arg AFRUS_DB_USER="${{ secrets.AFRUS_DB_USER_STAGING }}" \
              --build-arg AFRUS_DB_HOST="${{ secrets.AFRUS_DB_HOST_STAGING }}" \
              --build-arg AFRUS_DB_PORT="${{ secrets.AFRUS_DB_PORT_STAGING }}" \
              --build-arg AFRUS_DB_NAME="${{ secrets.AFRUS_DB_NAME_STAGING }}" \
              --build-arg AFRUS_DB_SSL_MODE="${{ secrets.AFRUS_DB_SSL_MODE_STAGING }}" \
              --build-arg AFRUS_DB_PASSWORD="${{ secrets.AFRUS_DB_PASSWORD_STAGING }}" \
              --build-arg VAULT_DB_USER="${{ secrets.VAULT_DB_USER_STAGING }}" \
              --build-arg VAULT_DB_HOST="${{ secrets.VAULT_DB_HOST_STAGING }}" \
              --build-arg VAULT_DB_PORT="${{ secrets.VAULT_DB_PORT_STAGING }}" \
              --build-arg VAULT_DB_SSL_MODE="${{ secrets.VAULT_DB_SSL_MODE_STAGING }}" \
              --build-arg VAULT_DB_PASSWORD="${{ secrets.VAULT_DB_PASSWORD_STAGING }}" \
              --build-arg ANALYTICS_DB_NAME="${{ secrets.ANALYTICS_DB_NAME_STAGING }}" \
              --build-arg AWS_S3_KEY="${{ secrets.AWS_S3_KEY_STAGING }}" \
              --build-arg AWS_S3_SECRET="${{ secrets.AWS_S3_SECRET_STAGING }}" \
              --build-arg AWS_S3_REGION="${{ secrets.AWS_S3_REGION_STAGING}}" \
              --build-arg AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET_STAGING }}" \
              --build-arg REDIS_HOST="${{ secrets.REDIS_HOST_STAGING }}" \
              --build-arg REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD_STAGING }}" \
              --build-arg REDIS_PORT="${{ secrets.REDIS_PORT_STAGING }}" \
              -f ./Dockerfile.prod .

            # 4. Stop and remove existing container 
            CONTAINER_ID=$(sudo docker ps -aqf "name=afrus-exports")
            if [ -n "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            # 4b. Restart nginx to free port 5000
            sudo systemctl restart nginx

            # 5. Run new container
            sudo docker run -d --name afrus-exports --network host \
              -e SERVER_PORT="${{ secrets.ENVIRONMENT_STAGING }}" \
              -e APP_KEY="${{ secrets.APP_KEY_STAGING }}" \
              -e SERVER_PORT="${{ secrets.SERVER_PORT_STAGING }}" \
              -e RABBITMQ_URL="${{ secrets.RABBITMQ_URL_STAGING }}" \
              -e RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT_STAGING }}" \
              -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER_STAGING}}" \
              -e RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD_STAGING }}" \
              -e RABBITMQ_MANAGER_PORT="${{ secrets.RABBITMQ_MANAGER_PORT_STAGING }}" \
              -e EXPORTS_QUEUE="${{ secrets.EXPORTS_QUEUE_STAGING }}" \
              -e DELETE_LEADS_QUEUE="${{ secrets.DELETE_LEADS_QUEUE_STAGING }}" \
              -e TAG_LEADS_QUEUE="${{ secrets.TAG_LEADS_QUEUE_STAGING }}" \
              -e EXPORTS_EXCHANGE="${{ secrets.EXPORTS_EXCHANGE_STAGING }}" \
              -e AFRUS_DB_USER="${{ secrets.AFRUS_DB_USER_STAGING }}" \
              -e AFRUS_DB_HOST="${{ secrets.AFRUS_DB_HOST_STAGING }}" \
              -e AFRUS_DB_PORT="${{ secrets.AFRUS_DB_PORT_STAGING }}" \
              -e AFRUS_DB_NAME="${{ secrets.AFRUS_DB_NAME_STAGING }}" \
              -e AFRUS_DB_SSL_MODE="${{ secrets.AFRUS_DB_SSL_MODE_STAGING }}" \
              -e AFRUS_DB_PASSWORD="${{ secrets.AFRUS_DB_PASSWORD_STAGING }}" \
              -e VAULT_DB_USER="${{ secrets.VAULT_DB_USER_STAGING }}" \
              -e VAULT_DB_HOST="${{ secrets.VAULT_DB_HOST_STAGING }}" \
              -e VAULT_DB_PORT="${{ secrets.VAULT_DB_PORT_STAGING }}" \
              -e VAULT_DB_SSL_MODE="${{ secrets.VAULT_DB_SSL_MODE_STAGING }}" \
              -e VAULT_DB_PASSWORD="${{ secrets.VAULT_DB_PASSWORD_STAGING }}" \
              -e ANALYTICS_DB_NAME="${{ secrets.ANALYTICS_DB_NAME_STAGING }}" \
              -e AWS_S3_KEY="${{ secrets.AWS_S3_KEY_STAGING }}" \
              -e AWS_S3_SECRET="${{ secrets.AWS_S3_SECRET_STAGING }}" \
              -e AWS_S3_REGION="${{ secrets.AWS_S3_REGION_STAGING }}" \
              -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET_STAGING }}" \
              -e REDIS_HOST="${{ secrets.REDIS_HOST_STAGING }}" \
              -e REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD_STAGING }}" \
              -e REDIS_PORT="${{ secrets.REDIS_PORT_STAGING }}" \
              afrus-exports

      - name: Send Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"content": "Pipeline de production ejecutado en el repositorio ${{ github.repository }} con el tag ${{ github.ref }} por el usuario ${{ github.event.head_commit.author.username }}."}' $DISCORD_WEBHOOK_URL
  
  deploy-main:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} # Verifica si la rama es main

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.3
        timeout-minutes: 30
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: 30m
          script: |
            cd ~/afrus-exports

            # 2. Update project
            git pull origin main

            # 3. Build Docker image
            sudo docker build -t afrus-exports \
              --build-arg SERVER_PORT="${{ secrets.ENVIRONMENT }}" \
              --build-arg APP_KEY="${{ secrets.APP_KEY }}" \
              --build-arg SERVER_PORT="${{ secrets.SERVER_PORT }}" \
              --build-arg RABBITMQ_URL="${{ secrets.RABBITMQ_URL }}" \
              --build-arg RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}" \
              --build-arg RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
              --build-arg RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}" \
              --build-arg RABBITMQ_MANAGER_PORT="${{ secrets.RABBITMQ_MANAGER_PORT }}" \
              --build-arg EXPORTS_QUEUE="${{ secrets.EXPORTS_QUEUE }}" \
              --build-arg TAG_LEADS_QUEUE="${{ secrets.TAG_LEADS_QUEUE  }}" \
              --build-arg DELETE_LEADS_QUEUE="${{ secrets.DELETE_LEADS_QUEUE  }}" \
              --build-arg EXPORTS_EXCHANGE="${{ secrets.EXPORTS_EXCHANGE }}" \
              --build-arg AFRUS_DB_USER="${{ secrets.AFRUS_DB_USER }}" \
              --build-arg AFRUS_DB_HOST="${{ secrets.AFRUS_DB_HOST }}" \
              --build-arg AFRUS_DB_PORT="${{ secrets.AFRUS_DB_PORT }}" \
              --build-arg AFRUS_DB_NAME="${{ secrets.AFRUS_DB_NAME }}" \
              --build-arg AFRUS_DB_SSL_MODE="${{ secrets.AFRUS_DB_SSL_MODE }}" \
              --build-arg AFRUS_DB_PASSWORD="${{ secrets.AFRUS_DB_PASSWORD }}" \
              --build-arg VAULT_DB_USER="${{ secrets.VAULT_DB_USER }}" \
              --build-arg VAULT_DB_HOST="${{ secrets.VAULT_DB_HOST }}" \
              --build-arg VAULT_DB_PORT="${{ secrets.VAULT_DB_PORT }}" \
              --build-arg VAULT_DB_SSL_MODE="${{ secrets.VAULT_DB_SSL_MODE }}" \
              --build-arg VAULT_DB_PASSWORD="${{ secrets.VAULT_DB_PASSWORD }}" \
              --build-arg ANALYTICS_DB_NAME="${{ secrets.ANALYTICS_DB_NAME }}" \
              --build-arg AWS_S3_KEY="${{ secrets.AWS_S3_KEY }}" \
              --build-arg AWS_S3_SECRET="${{ secrets.AWS_S3_SECRET }}" \
              --build-arg AWS_S3_REGION="${{ secrets.AWS_S3_REGION }}" \
              --build-arg AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
              --build-arg REDIS_HOST="${{ secrets.REDIS_HOST }}" \
              --build-arg REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
              --build-arg REDIS_PORT="${{ secrets.REDIS_PORT }}" \
              -f ./Dockerfile.prod .

            # 4. Stop and remove existing container 
            CONTAINER_ID=$(sudo docker ps -aqf "name=afrus-exports")
            if [ -n "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            # 4b. Restart nginx to free port 5000
            sudo systemctl restart nginx

            # 5. Run new container
            sudo docker run -d --name afrus-exports --network host \
              -e SERVER_PORT="${{ secrets.ENVIRONMENT }}" \
              -e APP_KEY="${{ secrets.APP_KEY }}" \
              -e SERVER_PORT="${{ secrets.SERVER_PORT }}" \
              -e RABBITMQ_URL="${{ secrets.RABBITMQ_URL }}" \
              -e RABBITMQ_PORT="${{ secrets.RABBITMQ_PORT }}" \
              -e RABBITMQ_USER="${{ secrets.RABBITMQ_USER }}" \
              -e RABBITMQ_PASSWORD="${{ secrets.RABBITMQ_PASSWORD }}" \
              -e RABBITMQ_MANAGER_PORT="${{ secrets.RABBITMQ_MANAGER_PORT }}" \
              -e EXPORTS_QUEUE="${{ secrets.EXPORTS_QUEUE }}" \
              -e DELETE_LEADS_QUEUE="${{ secrets.DELETE_LEADS_QUEUE }}" \
              -e TAG_LEADS_QUEUE="${{ secrets.TAG_LEADS_QUEUE }}" \
              -e EXPORTS_EXCHANGE="${{ secrets.EXPORTS_EXCHANGE }}" \
              -e AFRUS_DB_USER="${{ secrets.AFRUS_DB_USER }}" \
              -e AFRUS_DB_HOST="${{ secrets.AFRUS_DB_HOST }}" \
              -e AFRUS_DB_PORT="${{ secrets.AFRUS_DB_PORT }}" \
              -e AFRUS_DB_NAME="${{ secrets.AFRUS_DB_NAME }}" \
              -e AFRUS_DB_SSL_MODE="${{ secrets.AFRUS_DB_SSL_MODE }}" \
              -e AFRUS_DB_PASSWORD="${{ secrets.AFRUS_DB_PASSWORD }}" \
              -e VAULT_DB_USER="${{ secrets.VAULT_DB_USER }}" \
              -e VAULT_DB_HOST="${{ secrets.VAULT_DB_HOST }}" \
              -e VAULT_DB_PORT="${{ secrets.VAULT_DB_PORT }}" \
              -e VAULT_DB_SSL_MODE="${{ secrets.VAULT_DB_SSL_MODE }}" \
              -e VAULT_DB_PASSWORD="${{ secrets.VAULT_DB_PASSWORD }}" \
              -e ANALYTICS_DB_NAME="${{ secrets.ANALYTICS_DB_NAME }}" \
              -e AWS_S3_KEY="${{ secrets.AWS_S3_KEY }}" \
              -e AWS_S3_SECRET="${{ secrets.AWS_S3_SECRET }}" \
              -e AWS_S3_REGION="${{ secrets.AWS_S3_REGION }}" \
              -e AWS_S3_BUCKET="${{ secrets.AWS_S3_BUCKET }}" \
              -e REDIS_HOST="${{ secrets.REDIS_HOST }}" \
              -e REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
              -e REDIS_PORT="${{ secrets.REDIS_PORT }}" \
              afrus-exports

      - name: Send Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{"content": "Pipeline de production ejecutado en el repositorio ${{ github.repository }} con el tag ${{ github.ref }} por el usuario ${{ github.event.head_commit.author.username }}."}' $DISCORD_WEBHOOK_URL
